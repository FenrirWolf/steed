// NOTE: The following code was generated by "generate/errno.py",
//       do not edit directly!

// Generating command line:
// generate/errno.py path/to/linux/src mips:mips,mips64 sparc:sparc64 > src/linux/errno.rs

pub use self::base::*;

#[cfg(not(any(target_arch = "mips",
              target_arch = "mips64",
              target_arch = "sparc64")))]
pub use self::generic::*;

#[cfg(any(target_arch = "mips",
          target_arch = "mips64"))]
pub use self::mips::*;

#[cfg(any(target_arch = "sparc64"))]
pub use self::sparc::*;

#[allow(dead_code)]
mod base {
    use libc::c_int;

    pub const EPERM: c_int = 1;
    pub const ENOENT: c_int = 2;
    pub const ESRCH: c_int = 3;
    pub const EINTR: c_int = 4;
    pub const EIO: c_int = 5;
    pub const ENXIO: c_int = 6;
    pub const E2BIG: c_int = 7;
    pub const ENOEXEC: c_int = 8;
    pub const EBADF: c_int = 9;
    pub const ECHILD: c_int = 10;
    pub const EAGAIN: c_int = 11;
    pub const ENOMEM: c_int = 12;
    pub const EACCES: c_int = 13;
    pub const EFAULT: c_int = 14;
    pub const ENOTBLK: c_int = 15;
    pub const EBUSY: c_int = 16;
    pub const EEXIST: c_int = 17;
    pub const EXDEV: c_int = 18;
    pub const ENODEV: c_int = 19;
    pub const ENOTDIR: c_int = 20;
    pub const EISDIR: c_int = 21;
    pub const EINVAL: c_int = 22;
    pub const ENFILE: c_int = 23;
    pub const EMFILE: c_int = 24;
    pub const ENOTTY: c_int = 25;
    pub const ETXTBSY: c_int = 26;
    pub const EFBIG: c_int = 27;
    pub const ENOSPC: c_int = 28;
    pub const ESPIPE: c_int = 29;
    pub const EROFS: c_int = 30;
    pub const EMLINK: c_int = 31;
    pub const EPIPE: c_int = 32;
    pub const EDOM: c_int = 33;
    pub const ERANGE: c_int = 34;
}

#[allow(dead_code)]
mod generic {
    use libc::c_int;

    pub const EDEADLK: c_int = 35;
    pub const ENAMETOOLONG: c_int = 36;
    pub const ENOLCK: c_int = 37;
    pub const ENOSYS: c_int = 38;
    pub const ENOTEMPTY: c_int = 39;
    pub const ELOOP: c_int = 40;
    pub const EWOULDBLOCK: c_int = super::EAGAIN;
    pub const ENOMSG: c_int = 42;
    pub const EIDRM: c_int = 43;
    pub const ECHRNG: c_int = 44;
    pub const EL2NSYNC: c_int = 45;
    pub const EL3HLT: c_int = 46;
    pub const EL3RST: c_int = 47;
    pub const ELNRNG: c_int = 48;
    pub const EUNATCH: c_int = 49;
    pub const ENOCSI: c_int = 50;
    pub const EL2HLT: c_int = 51;
    pub const EBADE: c_int = 52;
    pub const EBADR: c_int = 53;
    pub const EXFULL: c_int = 54;
    pub const ENOANO: c_int = 55;
    pub const EBADRQC: c_int = 56;
    pub const EBADSLT: c_int = 57;
    pub const EDEADLOCK: c_int = super::EDEADLK;
    pub const EBFONT: c_int = 59;
    pub const ENOSTR: c_int = 60;
    pub const ENODATA: c_int = 61;
    pub const ETIME: c_int = 62;
    pub const ENOSR: c_int = 63;
    pub const ENONET: c_int = 64;
    pub const ENOPKG: c_int = 65;
    pub const EREMOTE: c_int = 66;
    pub const ENOLINK: c_int = 67;
    pub const EADV: c_int = 68;
    pub const ESRMNT: c_int = 69;
    pub const ECOMM: c_int = 70;
    pub const EPROTO: c_int = 71;
    pub const EMULTIHOP: c_int = 72;
    pub const EDOTDOT: c_int = 73;
    pub const EBADMSG: c_int = 74;
    pub const EOVERFLOW: c_int = 75;
    pub const ENOTUNIQ: c_int = 76;
    pub const EBADFD: c_int = 77;
    pub const EREMCHG: c_int = 78;
    pub const ELIBACC: c_int = 79;
    pub const ELIBBAD: c_int = 80;
    pub const ELIBSCN: c_int = 81;
    pub const ELIBMAX: c_int = 82;
    pub const ELIBEXEC: c_int = 83;
    pub const EILSEQ: c_int = 84;
    pub const ERESTART: c_int = 85;
    pub const ESTRPIPE: c_int = 86;
    pub const EUSERS: c_int = 87;
    pub const ENOTSOCK: c_int = 88;
    pub const EDESTADDRREQ: c_int = 89;
    pub const EMSGSIZE: c_int = 90;
    pub const EPROTOTYPE: c_int = 91;
    pub const ENOPROTOOPT: c_int = 92;
    pub const EPROTONOSUPPORT: c_int = 93;
    pub const ESOCKTNOSUPPORT: c_int = 94;
    pub const EOPNOTSUPP: c_int = 95;
    pub const EPFNOSUPPORT: c_int = 96;
    pub const EAFNOSUPPORT: c_int = 97;
    pub const EADDRINUSE: c_int = 98;
    pub const EADDRNOTAVAIL: c_int = 99;
    pub const ENETDOWN: c_int = 100;
    pub const ENETUNREACH: c_int = 101;
    pub const ENETRESET: c_int = 102;
    pub const ECONNABORTED: c_int = 103;
    pub const ECONNRESET: c_int = 104;
    pub const ENOBUFS: c_int = 105;
    pub const EISCONN: c_int = 106;
    pub const ENOTCONN: c_int = 107;
    pub const ESHUTDOWN: c_int = 108;
    pub const ETOOMANYREFS: c_int = 109;
    pub const ETIMEDOUT: c_int = 110;
    pub const ECONNREFUSED: c_int = 111;
    pub const EHOSTDOWN: c_int = 112;
    pub const EHOSTUNREACH: c_int = 113;
    pub const EALREADY: c_int = 114;
    pub const EINPROGRESS: c_int = 115;
    pub const ESTALE: c_int = 116;
    pub const EUCLEAN: c_int = 117;
    pub const ENOTNAM: c_int = 118;
    pub const ENAVAIL: c_int = 119;
    pub const EISNAM: c_int = 120;
    pub const EREMOTEIO: c_int = 121;
    pub const EDQUOT: c_int = 122;
    pub const ENOMEDIUM: c_int = 123;
    pub const EMEDIUMTYPE: c_int = 124;
    pub const ECANCELED: c_int = 125;
    pub const ENOKEY: c_int = 126;
    pub const EKEYEXPIRED: c_int = 127;
    pub const EKEYREVOKED: c_int = 128;
    pub const EKEYREJECTED: c_int = 129;
    pub const EOWNERDEAD: c_int = 130;
    pub const ENOTRECOVERABLE: c_int = 131;
    pub const ERFKILL: c_int = 132;
    pub const EHWPOISON: c_int = 133;
}

#[allow(dead_code)]
mod mips {
    use libc::c_int;

    pub const ENOMSG: c_int = 35;
    pub const EIDRM: c_int = 36;
    pub const ECHRNG: c_int = 37;
    pub const EL2NSYNC: c_int = 38;
    pub const EL3HLT: c_int = 39;
    pub const EL3RST: c_int = 40;
    pub const ELNRNG: c_int = 41;
    pub const EUNATCH: c_int = 42;
    pub const ENOCSI: c_int = 43;
    pub const EL2HLT: c_int = 44;
    pub const EDEADLK: c_int = 45;
    pub const ENOLCK: c_int = 46;
    pub const EBADE: c_int = 50;
    pub const EBADR: c_int = 51;
    pub const EXFULL: c_int = 52;
    pub const ENOANO: c_int = 53;
    pub const EBADRQC: c_int = 54;
    pub const EBADSLT: c_int = 55;
    pub const EDEADLOCK: c_int = 56;
    pub const EBFONT: c_int = 59;
    pub const ENOSTR: c_int = 60;
    pub const ENODATA: c_int = 61;
    pub const ETIME: c_int = 62;
    pub const ENOSR: c_int = 63;
    pub const ENONET: c_int = 64;
    pub const ENOPKG: c_int = 65;
    pub const EREMOTE: c_int = 66;
    pub const ENOLINK: c_int = 67;
    pub const EADV: c_int = 68;
    pub const ESRMNT: c_int = 69;
    pub const ECOMM: c_int = 70;
    pub const EPROTO: c_int = 71;
    pub const EDOTDOT: c_int = 73;
    pub const EMULTIHOP: c_int = 74;
    pub const EBADMSG: c_int = 77;
    pub const ENAMETOOLONG: c_int = 78;
    pub const EOVERFLOW: c_int = 79;
    pub const ENOTUNIQ: c_int = 80;
    pub const EBADFD: c_int = 81;
    pub const EREMCHG: c_int = 82;
    pub const ELIBACC: c_int = 83;
    pub const ELIBBAD: c_int = 84;
    pub const ELIBSCN: c_int = 85;
    pub const ELIBMAX: c_int = 86;
    pub const ELIBEXEC: c_int = 87;
    pub const EILSEQ: c_int = 88;
    pub const ENOSYS: c_int = 89;
    pub const ELOOP: c_int = 90;
    pub const ERESTART: c_int = 91;
    pub const ESTRPIPE: c_int = 92;
    pub const ENOTEMPTY: c_int = 93;
    pub const EUSERS: c_int = 94;
    pub const ENOTSOCK: c_int = 95;
    pub const EDESTADDRREQ: c_int = 96;
    pub const EMSGSIZE: c_int = 97;
    pub const EPROTOTYPE: c_int = 98;
    pub const ENOPROTOOPT: c_int = 99;
    pub const EPROTONOSUPPORT: c_int = 120;
    pub const ESOCKTNOSUPPORT: c_int = 121;
    pub const EOPNOTSUPP: c_int = 122;
    pub const EPFNOSUPPORT: c_int = 123;
    pub const EAFNOSUPPORT: c_int = 124;
    pub const EADDRINUSE: c_int = 125;
    pub const EADDRNOTAVAIL: c_int = 126;
    pub const ENETDOWN: c_int = 127;
    pub const ENETUNREACH: c_int = 128;
    pub const ENETRESET: c_int = 129;
    pub const ECONNABORTED: c_int = 130;
    pub const ECONNRESET: c_int = 131;
    pub const ENOBUFS: c_int = 132;
    pub const EISCONN: c_int = 133;
    pub const ENOTCONN: c_int = 134;
    pub const EUCLEAN: c_int = 135;
    pub const ENOTNAM: c_int = 137;
    pub const ENAVAIL: c_int = 138;
    pub const EISNAM: c_int = 139;
    pub const EREMOTEIO: c_int = 140;
    pub const EINIT: c_int = 141;
    pub const EREMDEV: c_int = 142;
    pub const ESHUTDOWN: c_int = 143;
    pub const ETOOMANYREFS: c_int = 144;
    pub const ETIMEDOUT: c_int = 145;
    pub const ECONNREFUSED: c_int = 146;
    pub const EHOSTDOWN: c_int = 147;
    pub const EHOSTUNREACH: c_int = 148;
    pub const EWOULDBLOCK: c_int = super::EAGAIN;
    pub const EALREADY: c_int = 149;
    pub const EINPROGRESS: c_int = 150;
    pub const ESTALE: c_int = 151;
    pub const ECANCELED: c_int = 158;
    pub const ENOMEDIUM: c_int = 159;
    pub const EMEDIUMTYPE: c_int = 160;
    pub const ENOKEY: c_int = 161;
    pub const EKEYEXPIRED: c_int = 162;
    pub const EKEYREVOKED: c_int = 163;
    pub const EKEYREJECTED: c_int = 164;
    pub const EOWNERDEAD: c_int = 165;
    pub const ENOTRECOVERABLE: c_int = 166;
    pub const ERFKILL: c_int = 167;
    pub const EHWPOISON: c_int = 168;
    pub const EDQUOT: c_int = 1133;
}

#[allow(dead_code)]
mod sparc {
    use libc::c_int;

    pub const EWOULDBLOCK: c_int = super::EAGAIN;
    pub const EINPROGRESS: c_int = 36;
    pub const EALREADY: c_int = 37;
    pub const ENOTSOCK: c_int = 38;
    pub const EDESTADDRREQ: c_int = 39;
    pub const EMSGSIZE: c_int = 40;
    pub const EPROTOTYPE: c_int = 41;
    pub const ENOPROTOOPT: c_int = 42;
    pub const EPROTONOSUPPORT: c_int = 43;
    pub const ESOCKTNOSUPPORT: c_int = 44;
    pub const EOPNOTSUPP: c_int = 45;
    pub const EPFNOSUPPORT: c_int = 46;
    pub const EAFNOSUPPORT: c_int = 47;
    pub const EADDRINUSE: c_int = 48;
    pub const EADDRNOTAVAIL: c_int = 49;
    pub const ENETDOWN: c_int = 50;
    pub const ENETUNREACH: c_int = 51;
    pub const ENETRESET: c_int = 52;
    pub const ECONNABORTED: c_int = 53;
    pub const ECONNRESET: c_int = 54;
    pub const ENOBUFS: c_int = 55;
    pub const EISCONN: c_int = 56;
    pub const ENOTCONN: c_int = 57;
    pub const ESHUTDOWN: c_int = 58;
    pub const ETOOMANYREFS: c_int = 59;
    pub const ETIMEDOUT: c_int = 60;
    pub const ECONNREFUSED: c_int = 61;
    pub const ELOOP: c_int = 62;
    pub const ENAMETOOLONG: c_int = 63;
    pub const EHOSTDOWN: c_int = 64;
    pub const EHOSTUNREACH: c_int = 65;
    pub const ENOTEMPTY: c_int = 66;
    pub const EPROCLIM: c_int = 67;
    pub const EUSERS: c_int = 68;
    pub const EDQUOT: c_int = 69;
    pub const ESTALE: c_int = 70;
    pub const EREMOTE: c_int = 71;
    pub const ENOSTR: c_int = 72;
    pub const ETIME: c_int = 73;
    pub const ENOSR: c_int = 74;
    pub const ENOMSG: c_int = 75;
    pub const EBADMSG: c_int = 76;
    pub const EIDRM: c_int = 77;
    pub const EDEADLK: c_int = 78;
    pub const ENOLCK: c_int = 79;
    pub const ENONET: c_int = 80;
    pub const ERREMOTE: c_int = 81;
    pub const ENOLINK: c_int = 82;
    pub const EADV: c_int = 83;
    pub const ESRMNT: c_int = 84;
    pub const ECOMM: c_int = 85;
    pub const EPROTO: c_int = 86;
    pub const EMULTIHOP: c_int = 87;
    pub const EDOTDOT: c_int = 88;
    pub const EREMCHG: c_int = 89;
    pub const ENOSYS: c_int = 90;
    pub const ESTRPIPE: c_int = 91;
    pub const EOVERFLOW: c_int = 92;
    pub const EBADFD: c_int = 93;
    pub const ECHRNG: c_int = 94;
    pub const EL2NSYNC: c_int = 95;
    pub const EL3HLT: c_int = 96;
    pub const EL3RST: c_int = 97;
    pub const ELNRNG: c_int = 98;
    pub const EUNATCH: c_int = 99;
    pub const ENOCSI: c_int = 100;
    pub const EL2HLT: c_int = 101;
    pub const EBADE: c_int = 102;
    pub const EBADR: c_int = 103;
    pub const EXFULL: c_int = 104;
    pub const ENOANO: c_int = 105;
    pub const EBADRQC: c_int = 106;
    pub const EBADSLT: c_int = 107;
    pub const EDEADLOCK: c_int = 108;
    pub const EBFONT: c_int = 109;
    pub const ELIBEXEC: c_int = 110;
    pub const ENODATA: c_int = 111;
    pub const ELIBBAD: c_int = 112;
    pub const ENOPKG: c_int = 113;
    pub const ELIBACC: c_int = 114;
    pub const ENOTUNIQ: c_int = 115;
    pub const ERESTART: c_int = 116;
    pub const EUCLEAN: c_int = 117;
    pub const ENOTNAM: c_int = 118;
    pub const ENAVAIL: c_int = 119;
    pub const EISNAM: c_int = 120;
    pub const EREMOTEIO: c_int = 121;
    pub const EILSEQ: c_int = 122;
    pub const ELIBMAX: c_int = 123;
    pub const ELIBSCN: c_int = 124;
    pub const ENOMEDIUM: c_int = 125;
    pub const EMEDIUMTYPE: c_int = 126;
    pub const ECANCELED: c_int = 127;
    pub const ENOKEY: c_int = 128;
    pub const EKEYEXPIRED: c_int = 129;
    pub const EKEYREVOKED: c_int = 130;
    pub const EKEYREJECTED: c_int = 131;
    pub const EOWNERDEAD: c_int = 132;
    pub const ENOTRECOVERABLE: c_int = 133;
    pub const ERFKILL: c_int = 134;
    pub const EHWPOISON: c_int = 135;
}

// Some errno values coincide on some platforms, while they don't on others.
#[allow(unreachable_patterns)]
pub fn error_string(errno: i32) -> Option<&'static str> {
    Some(match errno {
        EPERM => "Operation not permitted",
        ENOENT => "No such file or directory",
        ESRCH => "No such process",
        EINTR => "Interrupted system call",
        EIO => "I/O error",
        ENXIO => "No such device or address",
        E2BIG => "Argument list too long",
        ENOEXEC => "Exec format error",
        EBADF => "Bad file number",
        ECHILD => "No child processes",
        EAGAIN => "Try again",
        ENOMEM => "Out of memory",
        EACCES => "Permission denied",
        EFAULT => "Bad address",
        ENOTBLK => "Block device required",
        EBUSY => "Device or resource busy",
        EEXIST => "File exists",
        EXDEV => "Cross-device link",
        ENODEV => "No such device",
        ENOTDIR => "Not a directory",
        EISDIR => "Is a directory",
        EINVAL => "Invalid argument",
        ENFILE => "File table overflow",
        EMFILE => "Too many open files",
        ENOTTY => "Not a typewriter",
        ETXTBSY => "Text file busy",
        EFBIG => "File too large",
        ENOSPC => "No space left on device",
        ESPIPE => "Illegal seek",
        EROFS => "Read-only file system",
        EMLINK => "Too many links",
        EPIPE => "Broken pipe",
        EDOM => "Math argument out of domain of func",
        ERANGE => "Math result not representable",
        EDEADLK => "Resource deadlock would occur",
        ENAMETOOLONG => "File name too long",
        ENOLCK => "No record locks available",
        ENOSYS => "Invalid system call number",
        ENOTEMPTY => "Directory not empty",
        ELOOP => "Too many symbolic links encountered",
        EWOULDBLOCK => "Operation would block",
        ENOMSG => "No message of desired type",
        EIDRM => "Identifier removed",
        ECHRNG => "Channel number out of range",
        EL2NSYNC => "Level 2 not synchronized",
        EL3HLT => "Level 3 halted",
        EL3RST => "Level 3 reset",
        ELNRNG => "Link number out of range",
        EUNATCH => "Protocol driver not attached",
        ENOCSI => "No CSI structure available",
        EL2HLT => "Level 2 halted",
        EBADE => "Invalid exchange",
        EBADR => "Invalid request descriptor",
        EXFULL => "Exchange full",
        ENOANO => "No anode",
        EBADRQC => "Invalid request code",
        EBADSLT => "Invalid slot",
        EDEADLOCK => "Resource deadlock would occur",
        EBFONT => "Bad font file format",
        ENOSTR => "Device not a stream",
        ENODATA => "No data available",
        ETIME => "Timer expired",
        ENOSR => "Out of streams resources",
        ENONET => "Machine is not on the network",
        ENOPKG => "Package not installed",
        EREMOTE => "Object is remote",
        ENOLINK => "Link has been severed",
        EADV => "Advertise error",
        ESRMNT => "Srmount error",
        ECOMM => "Communication error on send",
        EPROTO => "Protocol error",
        EMULTIHOP => "Multihop attempted",
        EDOTDOT => "RFS specific error",
        EBADMSG => "Not a data message",
        EOVERFLOW => "Value too large for defined data type",
        ENOTUNIQ => "Name not unique on network",
        EBADFD => "File descriptor in bad state",
        EREMCHG => "Remote address changed",
        ELIBACC => "Can not access a needed shared library",
        ELIBBAD => "Accessing a corrupted shared library",
        ELIBSCN => ".lib section in a.out corrupted",
        ELIBMAX => "Attempting to link in too many shared libraries",
        ELIBEXEC => "Cannot exec a shared library directly",
        EILSEQ => "Illegal byte sequence",
        ERESTART => "Interrupted system call should be restarted",
        ESTRPIPE => "Streams pipe error",
        EUSERS => "Too many users",
        ENOTSOCK => "Socket operation on non-socket",
        EDESTADDRREQ => "Destination address required",
        EMSGSIZE => "Message too long",
        EPROTOTYPE => "Protocol wrong type for socket",
        ENOPROTOOPT => "Protocol not available",
        EPROTONOSUPPORT => "Protocol not supported",
        ESOCKTNOSUPPORT => "Socket type not supported",
        EOPNOTSUPP => "Operation not supported on transport endpoint",
        EPFNOSUPPORT => "Protocol family not supported",
        EAFNOSUPPORT => "Address family not supported by protocol",
        EADDRINUSE => "Address already in use",
        EADDRNOTAVAIL => "Cannot assign requested address",
        ENETDOWN => "Network is down",
        ENETUNREACH => "Network is unreachable",
        ENETRESET => "Network dropped connection because of reset",
        ECONNABORTED => "Software caused connection abort",
        ECONNRESET => "Connection reset by peer",
        ENOBUFS => "No buffer space available",
        EISCONN => "Transport endpoint is already connected",
        ENOTCONN => "Transport endpoint is not connected",
        ESHUTDOWN => "Cannot send after transport endpoint shutdown",
        ETOOMANYREFS => "Too many references: cannot splice",
        ETIMEDOUT => "Connection timed out",
        ECONNREFUSED => "Connection refused",
        EHOSTDOWN => "Host is down",
        EHOSTUNREACH => "No route to host",
        EALREADY => "Operation already in progress",
        EINPROGRESS => "Operation now in progress",
        ESTALE => "Stale file handle",
        EUCLEAN => "Structure needs cleaning",
        ENOTNAM => "Not a XENIX named type file",
        ENAVAIL => "No XENIX semaphores available",
        EISNAM => "Is a named type file",
        EREMOTEIO => "Remote I/O error",
        EDQUOT => "Quota exceeded",
        ENOMEDIUM => "No medium found",
        EMEDIUMTYPE => "Wrong medium type",
        ECANCELED => "Operation Canceled",
        ENOKEY => "Required key not available",
        EKEYEXPIRED => "Key has expired",
        EKEYREVOKED => "Key has been revoked",
        EKEYREJECTED => "Key was rejected by service",
        EOWNERDEAD => "Owner died",
        ENOTRECOVERABLE => "State not recoverable",
        ERFKILL => "Operation not possible due to RF-kill",
        EHWPOISON => "Memory page has hardware error",
        _ => return None,
    })
}
